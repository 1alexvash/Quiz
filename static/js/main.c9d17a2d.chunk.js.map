{"version":3,"sources":["sounds/sound_failure.mp3","images/timer.png","sounds/sound_success.mp3","components/Preloader.js","components/Quiz.js","components/Game/ProgressBar/ProgressBar.js","components/Game/Timer/Timer.js","components/Game/Game.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProgressBar","progress","circleRadiusCircumference","circleRadius","Math","PI","className","height","width","cx","cy","r","style","strokeDasharray","strokeDashoffset","fontSize","textAlign","Preloader","useState","showPreloader","setShowPreloader","setProgress","useEffect","timer","setInterval","clearInterval","setTimeout","to","Quiz","categories","setCategories","history","useHistory","data","length","random","floor","categoriesJSON","push","splice","map","category","key","onClick","e","pathname","state","selectTopic","currentQuestion","questions","Timer","secondsLeft","gameRoundTime","src","timerImg","alt","abs","toFixed","questionsData","forEach","q","incorrect_answers","correct_answer","sort","Game","setSecondsLeft","score","setScore","setCurrentQuestion","location","useLocation","setQuestions","nextRound","console","log","playSound","Audio","play","filter","question","failureSound","gameActive","answer","successSound","checkAnswer","Results","App","exact","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9d17a2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound_failure.7768c1d0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/timer.3d34c880.png\";","module.exports = __webpack_public_path__ + \"static/media/sound_success.dcbb5b43.mp3\";","import React, { useState, useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Preloader = () => {\r\n  const [showPreloader, setShowPreloader] = useState(true);\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    function addPercent() {\r\n      setProgress(progress + 1);\r\n    }\r\n    if (progress < 100) {\r\n      let timer = setInterval(addPercent, 40);\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [progress]);\r\n\r\n  setTimeout(() => {\r\n    setShowPreloader(false);\r\n  }, 5500);\r\n\r\n  if (showPreloader && process.env.NODE_ENV !== \"development\") {\r\n    return (\r\n      <div className=\"Preloader\">\r\n        <div className=\"content\">\r\n          <ProgressBar progress={progress} />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Redirect to=\"/game\" />;\r\n  }\r\n};\r\n\r\nconst ProgressBar = ({ progress }) => {\r\n  const circleRadius = 100;\r\n  const circleRadiusCircumference = circleRadius * 2 * Math.PI;\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <svg height=\"250\" width=\"250\">\r\n        <circle\r\n          cx=\"125\"\r\n          cy=\"125\"\r\n          r={circleRadius}\r\n          style={{\r\n            strokeDasharray: circleRadiusCircumference,\r\n            strokeDashoffset:\r\n              circleRadiusCircumference * (1 - (progress - 0.01) / 100),\r\n          }}\r\n        ></circle>\r\n      </svg>\r\n      <div className=\"text\" style={{ fontSize: `${24 + progress / 2}px` }}>\r\n        {progress}\r\n        <span>%</span>\r\n        {progress === 100 && (\r\n          <p style={{ fontSize: \"24px\", textAlign: \"center\" }}>Ready</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport categoriesJSON from \"../data/categories.json\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Quiz = () => {\r\n  const [categories, setCategories] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const selectTopic = (category) => {\r\n    history.push({\r\n      pathname: \"/game\",\r\n      state: { category },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const data = [];\r\n\r\n    while (data.length < 5) {\r\n      let random = Math.floor(Math.random() * categoriesJSON.length);\r\n      data.push(categoriesJSON.splice(random, 1)[0]);\r\n    }\r\n\r\n    setCategories(data);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Quiz\">\r\n      <div className=\"container\">\r\n        <h1>Quiz</h1>\r\n        <h2>Choose topic:</h2>\r\n\r\n        <div className=\"topics\">\r\n          {categories.map((category) => (\r\n            <button key={category} onClick={(e) => selectTopic(category)}>\r\n              {category}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import React from \"react\";\r\n\r\nconst ProgressBar = ({ currentQuestion, questions }) => (\r\n  <div className=\"Progress-bar\">\r\n    <div\r\n      className=\"bar\"\r\n      style={{ height: `${currentQuestion * (100 / questions.length)}%` }}\r\n    ></div>\r\n    <div className=\"text\">{(100 / questions.length) * currentQuestion}%</div>\r\n  </div>\r\n);\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\n\r\nimport timerImg from \"../../../images/timer.png\";\r\n\r\nconst Timer = ({ secondsLeft, gameRoundTime }) => (\r\n  <div className=\"Timer\">\r\n    <div className=\"icon\">\r\n      <img src={timerImg} alt=\"timer\" />\r\n    </div>\r\n    <div className=\"text\">{Math.abs(secondsLeft.toFixed(1))}s</div>\r\n    <div className=\"progress\">\r\n      <div\r\n        className=\"bar\"\r\n        style={{ width: `${100 - ((secondsLeft - 1) / gameRoundTime) * 100}%` }}\r\n      ></div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Timer;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useLocation, Redirect } from \"react-router-dom\";\r\n\r\nimport ProgressBar from \"./ProgressBar/ProgressBar\";\r\nimport Timer from \"./Timer/Timer\";\r\n\r\nimport successSound from \"../../sounds/sound_success.mp3\";\r\nimport failureSound from \"../../sounds/sound_failure.mp3\";\r\n\r\nimport questionsData from \"../../data/questions.json\";\r\n\r\nquestionsData.forEach((q) => q.incorrect_answers.push(q.correct_answer));\r\nquestionsData.forEach((q) =>\r\n  q.incorrect_answers.sort(() => 0.5 - Math.random())\r\n);\r\n\r\nconst gameRoundTime = 20;\r\n\r\nconst Game = () => {\r\n  const [secondsLeft, setSecondsLeft] = useState(gameRoundTime);\r\n  const [score, setScore] = useState(0);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const location = useLocation();\r\n  const category = location.state && location.state.category;\r\n  const [questions, setQuestions] = useState(0);\r\n\r\n  const nextRound = () => {\r\n    if (currentQuestion < questions.length) {\r\n      setSecondsLeft(gameRoundTime);\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      console.log(\"The game is over\");\r\n    }\r\n  };\r\n\r\n  const playSound = (src) => {\r\n    var audio = new Audio(src);\r\n    audio.play();\r\n  };\r\n\r\n  const checkAnswer = (answer) => {\r\n    const myAnswer = answer;\r\n    const correctAnswer = questions[currentQuestion].correct_answer;\r\n\r\n    if (myAnswer === correctAnswer) {\r\n      setScore(score + 1);\r\n      playSound(successSound);\r\n    } else {\r\n      playSound(failureSound);\r\n    }\r\n\r\n    nextRound();\r\n  };\r\n\r\n  const noAnswer = () => {\r\n    playSound(failureSound);\r\n    nextRound();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const questions = questionsData\r\n      .filter((question) => question.category === category)\r\n      .splice(0, 10);\r\n    setQuestions(questions);\r\n  }, [category]);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (secondsLeft === 0) {\r\n        noAnswer();\r\n        setSecondsLeft(gameRoundTime);\r\n      } else {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(timer);\r\n    // eslint-disable-next-line\r\n  }, [secondsLeft]);\r\n\r\n  const gameActive = currentQuestion < 10;\r\n\r\n  if (!category) {\r\n    return <Redirect to=\"/quiz\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Game\">\r\n      {gameActive ? (\r\n        <div className=\"container\">\r\n          {questions && (\r\n            <div>\r\n              <h2>{questions[currentQuestion].question}</h2>\r\n              <div className=\"answers\">\r\n                {questions[currentQuestion].incorrect_answers.map((answer) => (\r\n                  <button key={answer} onClick={() => checkAnswer(answer)}>\r\n                    {answer}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/results\",\r\n            state: { score },\r\n          }}\r\n        />\r\n      )}\r\n      <ProgressBar currentQuestion={currentQuestion} questions={questions} />\r\n      <Timer secondsLeft={secondsLeft} gameRoundTime={gameRoundTime} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\n\r\nimport { useLocation, Redirect, Link } from \"react-router-dom\";\r\n\r\nconst Results = () => {\r\n  const location = useLocation();\r\n\r\n  let score;\r\n\r\n  if (location.state) {\r\n    score = location.state.score;\r\n  } else {\r\n    return <Redirect to={\"/quiz\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Results\">\r\n      <div className=\"content\">\r\n        <p>\r\n          {score} answer{score > 1 && \"s\"} out of 10 <br />\r\n          {score === 1 ? \"was\" : \"were\"} correct\r\n        </p>\r\n        <Link to={\"/quiz\"} className=\"play-again\">\r\n          Play Again\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React from \"react\";\nimport \"./scss/main.css\";\n\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Preloader from \"./components/Preloader\";\nimport Quiz from \"./components/Quiz\";\nimport Game from \"./components/Game/Game\";\nimport Results from \"./components/Results\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Route exact path=\"/\" render={() => <Preloader />} />\n      <Route path=\"/quiz\" render={() => <Quiz />} />\n      <Route path=\"/game\" render={() => <Game />} />\n      <Route path=\"/results\" render={() => <Results />} />\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}